import React, { useState } from 'react';
import { Modal, Button, Form, Alert, Spinner, Nav, Tab } from 'react-bootstrap';
import axios from 'axios';
import './SSHKeyManager.css';

function SSHKeyManager({ 
  show, 
  onHide, 
  onKeyGenerated, 
  onKeyValidated,
  serverName,
  serverHost,
  sshUser
}) {
  const [activeTab, setActiveTab] = useState('generate');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  
  // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π
  const [keyType, setKeyType] = useState('rsa');
  const [keySize, setKeySize] = useState('2048');
  const [passphrase, setPassphrase] = useState('');
  const [confirmPassphrase, setConfirmPassphrase] = useState('');
  const [generatedKeys, setGeneratedKeys] = useState(null);
  const [showInstruction, setShowInstruction] = useState(false);
  
  // –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞
  const [privateKey, setPrivateKey] = useState('');
  const [keyPassphrase, setKeyPassphrase] = useState('');
  const [validationResult, setValidationResult] = useState(null);

  const handleGenerateKey = async () => {
    setError('');
    setSuccess('');
    
    if (passphrase && passphrase !== confirmPassphrase) {
      setError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      return;
    }
    
    setLoading(true);
    try {
      const token = localStorage.getItem('token');
      const response = await axios.post(
        'http://10.110.20.55:8000/servers/generate-ssh-key',
        {
          key_type: keyType,
          key_size: keyType === 'rsa' ? parseInt(keySize) : null,
          passphrase: passphrase || null
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      setGeneratedKeys(response.data);
      setShowInstruction(true);
      setSuccess('SSH-–∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!');
      
      if (onKeyGenerated) {
        onKeyGenerated({
          privateKey: response.data.private_key,
          passphrase: passphrase || null,
          fingerprint: response.data.fingerprint
        });
      }
    } catch (err) {
      setError(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞: ${err.response?.data?.detail || err.message}`);
    } finally {
      setLoading(false);
    }
  };

  const handleValidateKey = async () => {
    setError('');
    setSuccess('');
    setValidationResult(null);
    
    if (!privateKey.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á');
      return;
    }
    
    setLoading(true);
    try {
      const token = localStorage.getItem('token');
      const response = await axios.post(
        'http://10.110.20.55:8000/servers/validate-ssh-key',
        {
          private_key: privateKey,
          passphrase: keyPassphrase || null
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      setValidationResult(response.data);
      
      if (response.data.valid) {
        setSuccess('–ö–ª—é—á –≤–∞–ª–∏–¥–µ–Ω!');
        if (onKeyValidated) {
          onKeyValidated({
            privateKey: privateKey,
            passphrase: keyPassphrase || null,
            fingerprint: response.data.fingerprint
          });
        }
      } else {
        setError(response.data.error);
      }
    } catch (err) {
      setError(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${err.response?.data?.detail || err.message}`);
    } finally {
      setLoading(false);
    }
  };

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setPrivateKey(e.target.result);
      };
      reader.readAsText(file);
    }
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
    alert('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
  };

  const downloadPublicKey = () => {
    if (!generatedKeys) return;
    
    const blob = new Blob([generatedKeys.public_key], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${serverName || 'server'}_id_${keyType}.pub`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const downloadSetupScript = () => {
    if (!generatedKeys) return;
    
    const script = `#!/bin/bash
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ SSH-–∫–ª—é—á–∞ –¥–ª—è pgmon
# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleString()}

SERVER_HOST="${serverHost || 'your-server'}"
SERVER_USER="${sshUser || 'your-user'}"
PUBLIC_KEY="${generatedKeys.public_key}"

echo "üîê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SSH-–∫–ª—é—á–∞ –¥–ª—è PostgreSQL Activity Monitor"
echo "–°–µ—Ä–≤–µ—Ä: $SERVER_USER@$SERVER_HOST"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
echo "1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É..."
ssh -o ConnectTimeout=5 $SERVER_USER@$SERVER_HOST "echo '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ'" || {
    echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞."
    exit 1
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–∞
echo "2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞..."
ssh $SERVER_USER@$SERVER_HOST "
    mkdir -p ~/.ssh && chmod 700 ~/.ssh
    echo '$PUBLIC_KEY' >> ~/.ssh/authorized_keys
    chmod 600 ~/.ssh/authorized_keys
    echo '‚úÖ –ö–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'
"

# –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ –∫–ª—é—á—É
echo "3. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ –∫–ª—é—á—É..."
ssh -o PasswordAuthentication=no $SERVER_USER@$SERVER_HOST "echo '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É —Ä–∞–±–æ—Ç–∞–µ—Ç'" || {
    echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ –∫–ª—é—á—É"
    exit 1
}

echo ""
echo "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
`;
    
    const blob = new Blob([script], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `setup-ssh-${serverName || 'server'}.sh`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <Modal show={show} onHide={onHide} size="lg">
      <Modal.Header closeButton>
        <Modal.Title>üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SSH-–∫–ª—é—á–∞–º–∏</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        {error && <Alert variant="danger" dismissible onClose={() => setError('')}>{error}</Alert>}
        {success && <Alert variant="success" dismissible onClose={() => setSuccess('')}>{success}</Alert>}
        
        <Tab.Container activeKey={activeTab} onSelect={setActiveTab}>
          <Nav variant="tabs" className="mb-3">
            <Nav.Item>
              <Nav.Link eventKey="generate">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π</Nav.Link>
            </Nav.Item>
            <Nav.Item>
              <Nav.Link eventKey="upload">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π</Nav.Link>
            </Nav.Item>
          </Nav>
          
          <Tab.Content>
            {/* –í–∫–ª–∞–¥–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ */}
            <Tab.Pane eventKey="generate">
              {!showInstruction ? (
                <Form>
                  <Form.Group className="mb-3">
                    <Form.Label>–¢–∏–ø –∫–ª—é—á–∞</Form.Label>
                    <div>
                      <Form.Check
                        inline
                        type="radio"
                        label="RSA (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏)"
                        name="keyType"
                        value="rsa"
                        checked={keyType === 'rsa'}
                        onChange={(e) => setKeyType(e.target.value)}
                      />
                      <Form.Check
                        inline
                        type="radio"
                        label="Ed25519 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
                        name="keyType"
                        value="ed25519"
                        checked={keyType === 'ed25519'}
                        onChange={(e) => setKeyType(e.target.value)}
                      />
                    </div>
                  </Form.Group>
                  
                  {keyType === 'rsa' && (
                    <Form.Group className="mb-3">
                      <Form.Label>–†–∞–∑–º–µ—Ä –∫–ª—é—á–∞</Form.Label>
                      <Form.Select value={keySize} onChange={(e) => setKeySize(e.target.value)}>
                        <option value="2048">2048 –±–∏—Ç (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)</option>
                        <option value="3072">3072 –±–∏—Ç (—É—Å–∏–ª–µ–Ω–Ω—ã–π)</option>
                        <option value="4096">4096 –±–∏—Ç (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π)</option>
                      </Form.Select>
                    </Form.Group>
                  )}
                  
                  <Form.Group className="mb-3">
                    <Form.Label>–ü–∞—Ä–æ–ª—å –¥–ª—è –∫–ª—é—á–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</Form.Label>
                    <Form.Control
                      type="password"
                      placeholder="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∫–ª—é—á–∞ –±–µ–∑ –ø–∞—Ä–æ–ª—è"
                      value={passphrase}
                      onChange={(e) => setPassphrase(e.target.value)}
                    />
                  </Form.Group>
                  
                  {passphrase && (
                    <Form.Group className="mb-3">
                      <Form.Label>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</Form.Label>
                      <Form.Control
                        type="password"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑"
                        value={confirmPassphrase}
                        onChange={(e) => setConfirmPassphrase(e.target.value)}
                        isInvalid={confirmPassphrase && passphrase !== confirmPassphrase}
                      />
                      <Form.Control.Feedback type="invalid">
                        –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
                      </Form.Control.Feedback>
                    </Form.Group>
                  )}
                  
                  <div className="d-flex justify-content-end">
                    <Button 
                      variant="primary" 
                      onClick={handleGenerateKey}
                      disabled={loading || (passphrase && passphrase !== confirmPassphrase)}
                    >
                      {loading ? <Spinner size="sm" /> : 'üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á'}
                    </Button>
                  </div>
                </Form>
              ) : (
                <div className="ssh-key-instruction">
                  <h5>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–ª—é—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä</h5>
                  
                  <div className="step">
                    <span className="step-number">1</span>
                    <div className="step-content">
                      <strong>–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É</strong>
                      <code>ssh {sshUser || 'user'}@{serverHost || 'server'}</code>
                    </div>
                  </div>

                  <div className="step">
                    <span className="step-number">2</span>
                    <div className="step-content">
                      <strong>–°–æ–∑–¥–∞–π—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é .ssh (–µ—Å–ª–∏ –Ω–µ—Ç)</strong>
                      <code>mkdir -p ~/.ssh && chmod 700 ~/.ssh</code>
                    </div>
                  </div>

                  <div className="step">
                    <span className="step-number">3</span>
                    <div className="step-content">
                      <strong>–î–æ–±–∞–≤—å—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á</strong>
                      <code>echo "{generatedKeys?.public_key}" >> ~/.ssh/authorized_keys</code>
                      <Button size="sm" onClick={() => copyToClipboard(generatedKeys?.public_key)}>
                        üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                      </Button>
                    </div>
                  </div>

                  <div className="step">
                    <span className="step-number">4</span>
                    <div className="step-content">
                      <strong>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞</strong>
                      <code>chmod 600 ~/.ssh/authorized_keys</code>
                    </div>
                  </div>

                  <Alert variant="info" className="mt-3">
                    <strong>üí° –°–æ–≤–µ—Ç:</strong> –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
                  </Alert>

                  <div className="key-display">
                    <label>–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:</label>
                    <textarea 
                      readOnly 
                      value={generatedKeys?.public_key || ''}
                      className="form-control"
                      rows="4"
                    />
                    <div className="mt-2">
                      <Button onClick={downloadPublicKey} className="me-2">
                        üíæ –°–∫–∞—á–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
                      </Button>
                      <Button onClick={downloadSetupScript} variant="success">
                        üìÑ –°–∫–∞—á–∞—Ç—å —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
                      </Button>
                    </div>
                  </div>

                  <div className="fingerprint-info mt-3">
                    <strong>Fingerprint:</strong> <code>{generatedKeys?.fingerprint}</code>
                  </div>
                  
                  <div className="mt-3">
                    <Button variant="secondary" onClick={() => setShowInstruction(false)}>
                      ‚Üê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω
                    </Button>
                  </div>
                </div>
              )}
            </Tab.Pane>
            
            {/* –í–∫–ª–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞ */}
            <Tab.Pane eventKey="upload">
              <Form>
                <Form.Group className="mb-3">
                  <Form.Label>–ü—Ä–∏–≤–∞—Ç–Ω—ã–π SSH-–∫–ª—é—á</Form.Label>
                  <Form.Control
                    as="textarea"
                    rows={8}
                    placeholder="-----BEGIN RSA PRIVATE KEY-----&#10;...&#10;-----END RSA PRIVATE KEY-----"
                    value={privateKey}
                    onChange={(e) => setPrivateKey(e.target.value)}
                  />
                  <Form.Text className="text-muted">
                    –í—Å—Ç–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª
                  </Form.Text>
                </Form.Group>
                
                <Form.Group className="mb-3">
                  <Form.Label>–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞</Form.Label>
                  <Form.Control
                    type="file"
                    accept=".pem,.key,id_rsa,id_ed25519"
                    onChange={handleFileUpload}
                  />
                </Form.Group>
                
                <Form.Group className="mb-3">
                  <Form.Label>–ü–∞—Ä–æ–ª—å –æ—Ç –∫–ª—é—á–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)</Form.Label>
                  <Form.Control
                    type="password"
                    placeholder="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ –∫–ª—é—á –±–µ–∑ –ø–∞—Ä–æ–ª—è"
                    value={keyPassphrase}
                    onChange={(e) => setKeyPassphrase(e.target.value)}
                  />
                </Form.Group>
                
                {validationResult && validationResult.valid && (
                  <Alert variant="success">
                    <div>‚úÖ –ö–ª—é—á –≤–∞–ª–∏–¥–µ–Ω!</div>
                    <div><strong>Fingerprint:</strong> <code>{validationResult.fingerprint}</code></div>
                    {validationResult.public_key && (
                      <div className="mt-2">
                        <strong>–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:</strong>
                        <textarea 
                          readOnly 
                          value={validationResult.public_key}
                          className="form-control mt-1"
                          rows="3"
                        />
                      </div>
                    )}
                  </Alert>
                )}
                
                <div className="d-flex justify-content-end">
                  <Button 
                    variant="primary" 
                    onClick={handleValidateKey}
                    disabled={loading || !privateKey.trim()}
                  >
                    {loading ? <Spinner size="sm" /> : '‚úì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª—é—á'}
                  </Button>
                </div>
              </Form>
            </Tab.Pane>
          </Tab.Content>
        </Tab.Container>
      </Modal.Body>
      <Modal.Footer>
        <Button variant="secondary" onClick={onHide}>
          –ó–∞–∫—Ä—ã—Ç—å
        </Button>
      </Modal.Footer>
    </Modal>
  );
}

export default SSHKeyManager;

# app/api/ssh_keys.py
from fastapi import APIRouter, HTTPException, Depends, status, UploadFile, File
from typing import List, Optional
import logging
import io
from datetime import datetime
from app.models.ssh_key import SSHKeyCreate, SSHKeyImport, SSHKeyResponse
from app.models.user import User
from app.auth.dependencies import get_current_user
from app.services.ssh_key_storage import ssh_key_storage
from app.services import load_servers

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/ssh-keys", tags=["ssh-keys"])

def require_admin_or_operator(current_user: User = Depends(get_current_user)) -> User:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    if current_user.role not in ["admin", "operator"]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
        )
    return current_user

@router.get("", response_model=List[SSHKeyResponse])
async def list_ssh_keys(current_user: User = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö SSH-–∫–ª—é—á–µ–π"""
    try:
        keys = ssh_key_storage.list_keys()
        return [SSHKeyResponse(**key.dict()) for key in keys]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/{key_id}", response_model=SSHKeyResponse)
async def get_ssh_key(key_id: str, current_user: User = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º SSH-–∫–ª—é—á–µ"""
    key = ssh_key_storage.get_key(key_id)
    if not key:
        raise HTTPException(status_code=404, detail="SSH-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return SSHKeyResponse(**key.dict())

@router.post("/generate", response_model=SSHKeyResponse)
async def generate_ssh_key(
    key_data: SSHKeyCreate,
    current_user: User = Depends(require_admin_or_operator)
):
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π SSH-–∫–ª—é—á"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
        existing_keys = ssh_key_storage.list_keys()
        if any(k.name == key_data.name for k in existing_keys):
            raise HTTPException(
                status_code=400,
                detail=f"–ö–ª—é—á —Å –∏–º–µ–Ω–µ–º '{key_data.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á
        key = ssh_key_storage.create_key(key_data, current_user.login)
        return SSHKeyResponse(**key.dict())
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/import", response_model=SSHKeyResponse)
async def import_ssh_key(
    key_data: SSHKeyImport,
    current_user: User = Depends(require_admin_or_operator)
):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π SSH-–∫–ª—é—á"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
        existing_keys = ssh_key_storage.list_keys()
        if any(k.name == key_data.name for k in existing_keys):
            raise HTTPException(
                status_code=400,
                detail=f"–ö–ª—é—á —Å –∏–º–µ–Ω–µ–º '{key_data.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            )
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á
        key = ssh_key_storage.import_key(key_data, current_user.login)
        return SSHKeyResponse(**key.dict())
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–ª—é—á–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/import-file", response_model=SSHKeyResponse)
async def import_ssh_key_file(
    file: UploadFile = File(...),
    name: str = None,
    passphrase: Optional[str] = None,
    description: Optional[str] = None,
    current_user: User = Depends(require_admin_or_operator)
):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å SSH-–∫–ª—é—á –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        content = await file.read()
        private_key = content.decode('utf-8')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ
        if not name:
            name = file.filename.replace('.pem', '').replace('.key', '')
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        key_import = SSHKeyImport(
            name=name,
            private_key=private_key,
            passphrase=passphrase,
            description=description
        )
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á
        key = ssh_key_storage.import_key(key_import, current_user.login)
        return SSHKeyResponse(**key.dict())
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–ª—é—á–∞ –∏–∑ —Ñ–∞–π–ª–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.delete("/{key_id}")
async def delete_ssh_key(
    key_id: str,
    current_user: User = Depends(require_admin_or_operator)
):
    """–£–¥–∞–ª–∏—Ç—å SSH-–∫–ª—é—á"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –∫–ª—é—á
        servers = load_servers()
        servers_using_key = [
            s.name for s in servers 
            if getattr(s, 'ssh_key_id', None) == key_id
        ]
        
        if servers_using_key:
            raise HTTPException(
                status_code=400,
                detail=f"–ö–ª—é—á –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö: {', '.join(servers_using_key)}"
            )
        
        # –£–¥–∞–ª—è–µ–º –∫–ª—é—á
        if not ssh_key_storage.delete_key(key_id):
            raise HTTPException(status_code=404, detail="SSH-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return {"message": "SSH-–∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/{key_id}/servers")
async def get_key_servers(
    key_id: str,
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã–π –∫–ª—é—á"""
    key = ssh_key_storage.get_key(key_id)
    if not key:
        raise HTTPException(status_code=404, detail="SSH-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    servers = load_servers()
    servers_using_key = [
        {"name": s.name, "host": s.host}
        for s in servers 
        if getattr(s, 'ssh_key_id', None) == key_id
    ]
    
    return {
        "key_name": key.name,
        "servers_count": len(servers_using_key),
        "servers": servers_using_key
    }

@router.get("/{key_id}/download-public")
async def download_public_key(
    key_id: str,
    current_user: User = Depends(get_current_user)
):
    """–°–∫–∞—á–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á"""
    key = ssh_key_storage.get_key(key_id)
    if not key:
        raise HTTPException(status_code=404, detail="SSH-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return {
        "filename": f"{key.name}_id_{key.key_type}.pub",
        "content": key.public_key,
        "content_type": "text/plain"
    }

@router.get("/{key_id}/installation-script")
async def get_installation_script(
    key_id: str,
    server_host: str,
    server_user: str,
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª—é—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    key = ssh_key_storage.get_key(key_id)
    if not key:
        raise HTTPException(status_code=404, detail="SSH-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    script = f"""#!/bin/bash
# –°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SSH-–∫–ª—é—á–∞ '{key.name}'
# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

SERVER_HOST="{server_host}"
SERVER_USER="{server_user}"
PUBLIC_KEY="{key.public_key}"

echo "üîê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SSH-–∫–ª—é—á–∞ –¥–ª—è PostgreSQL Activity Monitor"
echo "–ö–ª—é—á: {key.name}"
echo "Fingerprint: {key.fingerprint}"
echo "–°–µ—Ä–≤–µ—Ä: $SERVER_USER@$SERVER_HOST"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
echo "1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É..."
ssh -o ConnectTimeout=5 $SERVER_USER@$SERVER_HOST "echo '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ'" || {{
    echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞."
    exit 1
}}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–∞
echo "2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞..."
ssh $SERVER_USER@$SERVER_HOST "
    mkdir -p ~/.ssh && chmod 700 ~/.ssh
    echo '$PUBLIC_KEY' >> ~/.ssh/authorized_keys
    chmod 600 ~/.ssh/authorized_keys
    echo '‚úÖ –ö–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'
"

# –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ –∫–ª—é—á—É
echo "3. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ –∫–ª—é—á—É..."
ssh -o PasswordAuthentication=no $SERVER_USER@$SERVER_HOST "echo '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É —Ä–∞–±–æ—Ç–∞–µ—Ç'" || {{
    echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ –∫–ª—é—á—É"
    exit 1
}}

echo ""
echo "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
echo "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞."
"""
    
    return {
        "filename": f"install_{key.name}_{server_host}.sh",
        "content": script,
        "content_type": "text/plain"
    }

@router.post("/{key_id}/update-servers-count")
async def update_servers_count(
    key_id: str,
    current_user: User = Depends(get_current_user)
):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö –∫–ª—é—á"""
    servers = load_servers()
    count = len([s for s in servers if getattr(s, 'ssh_key_id', None) == key_id])
    
    ssh_key_storage.update_servers_count(key_id, count)
    
    return {"key_id": key_id, "servers_count": count}
